import { Button, GridBox, LineEdit, HorizontalBox, VerticalBox, ComboBox, StandardListView, StandardButton, TextEdit, ListView, CheckBox } from "std-widgets.slint";

export enum PaneId { left, right }

export struct Line {
	text: string,
	striked: bool,
}

component DiffPane inherits VerticalBox {
    in property <[Line]> lines;
    in property <[Line]> diff;
    in property <string> title;

    property <[Line]> current: is-diff.checked ? diff : lines;

    callback import();
    callback export();
    callback open();
    callback reload();

    states [
        no-title when title == "": {
            title-text.color: gray;
            title-text.text: "<None>";
        }
    ]

    HorizontalLayout {
        spacing: 5px;
        alignment: stretch;

        title-text := Text {
            text: title;
            horizontal-alignment: left;
            vertical-alignment: center;
            horizontal-stretch: 1;
            vertical-stretch: 1;
        }

        is-diff := CheckBox {
            text: "Diff";
            checked: true;
        }
    }

    HorizontalLayout {
        spacing: 5px;

        Button {
            text: "Open Folder";
            clicked => {
                open()
            }
        }

        Button {
            text: "Import JSON";
            clicked => {
                import()
            }
        }

        Button {
            text: "Export JSON";
            enabled: title != "";
            clicked => {
                export()
            }
        }

        Button {
            text: "Reload";
            enabled: title != "";
            clicked => {
                reload()
            }
        }
    }

    Rectangle {
        background: #333;
        ListView {
            for line[i] in current: Rectangle {
                width: parent.width;
                height: 24px;
                background: mod(i, 2) == 0 ? transparent : #222;
                TouchArea {
                    clicked => {
                        line.striked = !line.striked;
                    }
                }

                text := Text {
                    x: 5px;
                    text: line.text;
                    horizontal-alignment: left;
                }

                states [
                    striked when line.striked: {
                        text.color: gray;
                    }
                ]
            }
        }
    }
}

export component AppWindow inherits Dialog {
    // default-font-family: "monospace";
	default-font-size: 16px;
    title: "Dir Diff";
    icon: app-icon;
    min-width: 500px;
    min-height: 600px;

    in property <image> app-icon;

    public function set-lines(which: PaneId, lines: [Line]) {
        if which == PaneId.left {
            left.lines = lines;
        } else {
            right.lines = lines;
        }
    }

    public function set-diff(which: PaneId, lines: [Line]) {
        if which == PaneId.left {
            left.diff = lines;
        } else {
            right.diff = lines;
        }
    }

    public function set-title(which: PaneId, title: string) {
        if which == PaneId.left {
            left.title = title;
        } else {
            right.title = title;
        }
    }

    callback import(PaneId);
    callback export(PaneId);
    callback open(PaneId);
    callback reload(PaneId);

    rect := Rectangle {

        function is-portrait() -> bool {
            rect.width < rect.height || rect.width < 1000px
        }

        left := DiffPane {
            width: !is-portrait() ? parent.width / 2 : parent.width;
            height: !is-portrait() ? parent.height : parent.height / 2;
            x: 0;
            y: 0;
            export => {
                root.export(PaneId.left)
            }
            import => {
                root.import(PaneId.left)
            }
            open => {
                root.open(PaneId.left)
            }
            reload => {
                root.reload(PaneId.left)
            }
        }

        right := DiffPane {
            width: !is-portrait() ? parent.width / 2 : parent.width;
            height: !is-portrait() ? parent.height : parent.height / 2;
            x: !is-portrait() ? parent.width / 2 : 0;
            y: !is-portrait() ? 0 : parent.height / 2;
            export => {
                root.export(PaneId.right)
            }
            import => {
                root.import(PaneId.right)
            }
            open => {
                root.open(PaneId.right)
            }
            reload => {
                root.reload(PaneId.right)
            }
        }
    }
}
